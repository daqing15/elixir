0.4.0
New features:
- Implemented a new syntax to declare fields and relationships, much closer to
  what is found in other Python ORM's. The with_fields syntax is now
  deprecated in favor of a that new syntax. The old statement based (has_field 
  et al.) syntax stays the default for now. This was done with help from a 
  patch by Adam Gomaa.
- Implemented polymorphic single-table inheritance as well as polymorphic and
  non-polymorphic multi-table (aka joined table) inheritance.
- Added a .query attribute on all entities. The old .query() syntax is still
  available.
- Added support for "manual session management" (ie you can now define an 
  entity with "using_options(session=None)" and it won't use any
  SessionContext extension, nor receive the "query" attribute.
- Added ext sub-package for additional Elixir statements.
- Added ext.associable for generating polymorphic associations with Elixir
  statements.
- versioning, encrypt ext [TODO]
- Added has_property statement to add properties on the entity mapper which
  rely on columns (an thus need them to be defined before the property can be
  declared). See tests/test_has_property.py for an example.
- Made the statement system more powerfull.

Changes:
- Made Elixir work with both SQLAlchemy 0.4 and 0.3.10 (with help from a patch
  by Ants Aasma).
- Moved away from assign_mapper, now all assign_mapper-provided methods are on
  the Entity class. Now, if people don't like them, they have the option to
  simply provide another base class.
- Default objectstore is now a ScopedSession when working on SQLAlchemy 0.4. 
  It means that it's not wrapped in an Objectstore object at all. This means, 
  that depending on the version of SA you are using, you'll get a slightly 
  different behavior.
- Relationships to other classes can now also be defined using the classes
  themselves in addition to the class namees. Obviously, this doesn't work for
  forward references.
- Autodelay and init order changed => order_by + belongs_to, belongs_to + pk, 
  ... [TODO]
- Classes defined inside a function can now have relationships to each other.
- Added default __init__ method on entities so that subclasses can override it
  and still have the "set attribute by keyword" behavior by calling super()
- Added "through" and "via" keyword arguments on relationships and has_field
  statement, to proxy values through relationships (uses association_proxy)
- Made EntityMeta public, so that people can actually define their own base 
  class.
- Changed the order of relationship kwargs processing so that computed kwargs
  can be overridden by kwargs manually passed to the statement. This should
  only be used if you know what you are doing.
- Added onupdate kwarg to BelongsTo relationships for consistency with the
  ondelete kwarg
- Added ondelete and onupdate kwargs for use with has_and_belongs_to_many
  to apply on delete clauses to foreign key constraints on the m2m table.
- Columns of the intermediary table of an has_and_belongs_to_many relationship
  are now marked as primary keys.
- Reworked how entities look for primary keys on related entities. This
  enables one "normal" entity (fully defined in Elixir) to refer to an entity
  which is autoloaded.
- Added translation (from column name to column object) of the primary_key 
  mapper option so that it can actually be used. This allows to have entities
  without any primary key defined at the table level.
- Dropped support for the old threadlocal SA extension (which doesn't even exist
  anymore in SA 0.4)

Bug fixes:
- Reworked/cleaned tests so that they don't leak stuff to other tests (both at
  the method level and module level) anymore. Uses nosetest's module level 
  fixture.
- Fixed relationships to entities whose primary_key field has been defined
  with a "key" argument (based on a patch by Paul Johnston).
- Fixed some buggy tests.
- Fixed relationships to tables using a schema (patch by Neil Blakey-Milner)
- Made inverse relationships use backrefs. This fixes the "bidirectional
  coherency" problem some people had before doing a flush. (based on a patch 
  from Remi Jolin).

0.3.0 - 2007-03-27
- Made the provided metadata not threadlocal. This could break things for you
  in some rare case. Please see the (newly created) FAQ file for details about
  this.
- Added support for autoloading/reflecting databases with
  has_and_belongs_to_many relationships. The tablename argument is now
  optional, but still recommended, otherwise you'll have to use the same exact
  name for your intermediary table than the one generated. You also _have to_
  specify at least one of either local_side or remote_side argument.
- Added support for the "version_id_col" option on entities. This option adds 
  a column to the table which will be used to prevent concurrent modifications
  on any row of the entity's table (i.e. it will raise an error if it happens).
- Made the colname argument optional for belongs_to relationships in
  autoloaded entities. It is only required to specify it if you have several
  belongs_to relationships between two entities/tables.
- Applied patch from "Wavy" so that columns of a table are in the same order
  as they were declared (this only works for the has_field statement).
- Applied patch from Isaac Csandl to add an "ondelete" argument to
  belongs_to relationships. The content of that argument is forwarded to the
  foreign key constraint.
- Foreign key names generated by belongs_to relationships use column names 
  instead of relation names in case we have a relation with the same name
  defined in several entities inheriting from the same entity using single-
  table inheritance (and we set a custom column name in one of them to avoid
  a column-name conflict).
- Using invalid options on entities will now raise an exception
- Added __version__
- Use an explicit metaclass for entities, so that people can define their own
  base class.
- Changed the approach to reflecting/autoloading belongs_to relationships.
  This shouldn't change anything to how it's used but allowed me to factor
  some code with has_and_belongs_to_many relationships.
- The tablename option can now be given a callable so that people can provide
  their own function to get the table name for an entity. The tablename option
  can now also be set globally (using the options_defaults dictionary). Of
  course, this only makes sense for the callable usecase.

- Fixed bug preventing having entities without any statement.
- Fixed documentation for belongs_to relationships (the arguemnt is "required",
  not "nullable").
- Fixed typo which broke the use_alter argument on belongs_to relationships.
- Fixed inheritance unit test to pass SQLAlchemy type check on relations
  (introduced in SA 0.3.6)
- Fixed wrong field length in autoload test (it was not noticeable with sqlite).
- Actually make the code python 2.3 compatible (Robin's patch was based on
  0.1.0 while I had introduced more decorators in the trunk in the mean time).

- Made some PEP8 tweaks in many places. Used the pep8 script provided with 
  Cheesecake.
- Some cleanup/useless code removal

0.2.0 - 2007-02-28
- Applied patch from Robin Munn to make the code python 2.3 compatible
- Per a suggestion on the mailing list, look at the calling stack frame to
  ensure that we apply statements to the proper class.  We now attach the
  statement list to the class itself, rather than attaching it to a global
  list that is neither threadsafe, nor safe when doing nested class 
  definition.  Also added a test to validate that this works.
- implemented singletable non-polymorphic inheritance
- added support to pass non-keyword arguments to tables. You just pass
  them to the using_table_options statement and they will be forwarded to the
  table along with the keyword arguments. This can be used to set table 
  constraints.
- added support for deferred columns (use the "deferred" keyword argument on
  fields)
- added a "required" keyword argument on fields and BelongsTo
  relationships. This is the opposite of the "nullable" SA argument.
- added a "column_kwargs" keyword argument to BelongsTo relationships 
  to forward any keyword argument directly to the SA Column.
- added support for the use_alter and constraint_kwargs kwargs on BelongsTo
  relationships (forwarded to SA ForeignKeyConstraint).
    -> removed the systematic use_alter on BelongsTo relations since it
       can now be specified only when needed.
    -> removed it from HasAndBelongsToMany relations, since I think a
       circular foreign key dependency can't happen with those relations.
- fixed foreign key names on MySQL (and possibly other) databases by 
  making sure the generated name is unique for the whole database, and not
  only for the table on which it applies.
- corrected some docstrings

0.1.0 - 2007-02-12
initial release

